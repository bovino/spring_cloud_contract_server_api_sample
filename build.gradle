buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
	}
	dependencies {
		classpath 'org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.2.2.RELEASE'
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'groovy'
}

apply plugin: 'spring-cloud-contract'
apply plugin: 'maven-publish'

group = 'com.bovino'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Hoxton.SR4")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

contracts {

	baseClassForTests = 'com.bovino.cdcdemo.contract.base.TestBaseForContracts'
	targetFramework = org.springframework.cloud.contract.verifier.config.TestFramework.JUNIT5
	// Para usar Spock ao inves de JUNIT
	// targetFramework = org.springframework.cloud.contract.verifier.config.TestFramework.SPOCK
	// veja aqui outras opções de configuração para o Gradle
	// https://cloud.spring.io/spring-cloud-contract/reference/html/gradle-project.html

}

test {

	useJUnitPlatform()

	testLogging {
		exceptionFormat = 'full'
		outputs.upToDateWhen {false} // check why here: https://stackoverflow.com/a/20359498
	}

	afterTest { desc, result ->
		logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}

	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
			if (result.testCount == 0 && !skipTests) { // you REALLY should be using tests.... you know that :-)
				throw new IllegalStateException("No tests were found. Failing the build")
			}
		}
	}
}

publishing {
  publications {
		stubs(MavenPublication) {
			artifact verifierStubsJar
		}
	}
}
